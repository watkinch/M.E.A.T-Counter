#include <ESP8266WiFi.h>
#include <WiFiUdp.h>
#include <Wire.h>
#include <Adafruit_ADS1015.h>
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
const char* ssid = "NSAISWATCHINGYOU-2.4";
const char* password = "Boskow7676";
WiFiUDP Udp;
unsigned int localUdpPort = 4210;  // local port to listen on
char incomingPacket[255];  // buffer for incoming packets
char  replyPacket[] = "Hi there! Got the message :-)";  // a reply string to send back

IPAddress ip(10, 0, 0, 189);
int16_t adc0_1, adc1_1,adc0_2, adc1_2 ;
int DeltaSensor1 = 0;  
int DeltaSensor2 = 0;  
int LaserTresh =500;
int out=0;
//// Iterable for count up
int C=0;
///////Sensor 1 = true for Count up
int in=0;
//// Iterable for count down
int D=0;
///////Sensor 2 = true for Count up
int count = 0;
int I=0;
int N=0;
int Data;
int threshold =5;
Adafruit_ADS1115 ads;  /* Use this for the 16-bit version */
//Adafruit_ADS1015 ads;     /* Use thi for the 12-bit version */
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
void setup()
{
  
  Serial.begin(115200);
  //Fpr ADC
  Serial.println("Hello!");
  Serial.println("Getting single-ended readings from AIN0..3");
  Serial.println("ADC Range: +/- 6.144V (1 bit = 3mV/ADS1015, 0.1875mV/ADS1115)");
  // The ADC input range (or gain) can be changed via the following
  // functions, but be careful never to exceed VDD +0.3V max, or to
  // exceed the upper and lower limits if you adjust the input range!
  // Setting these values incorrectly may destroy your ADC!
  //                                                                ADS1015  ADS1115
  //                                                                -------  -------
  // ads.setGain(GAIN_TWOTHIRDS);  // 2/3x gain +/- 6.144V  1 bit = 3mV      0.1875mV (default)
  // ads.setGain(GAIN_ONE);        // 1x gain   +/- 4.096V  1 bit = 2mV      0.125mV
  //ads.setGain(GAIN_TWO);        // 2x gain   +/- 2.048V  1 bit = 1mV      0.0625mV
  // ads.setGain(GAIN_FOUR);       // 4x gain   +/- 1.024V  1 bit = 0.5mV    0.03125mV
  // ads.setGain(GAIN_EIGHT);      // 8x gain   +/- 0.512V  1 bit = 0.25mV   0.015625mV
  // ads.setGain(GAIN_SIXTEEN);    // 16x gain  +/- 0.256V  1 bit = 0.125mV  0.0078125mV
  ads.begin();
  // put your setup code here, to run once:

  pinMode(16, OUTPUT); // D0 ->pin 5 on 7-segment
  pinMode(2, OUTPUT); // D1 -> pin 4 on 7-segment
  pinMode(12, OUTPUT); // D2 -> pin 2 on 7-segment
  pinMode(0, OUTPUT); // D3 -> pin 1 on 7-segment
  pinMode(14, OUTPUT); // D5 -> pin 7 on 7-segment
  pinMode(13, OUTPUT); // D7 -> pin 9 on 7-segment
  pinMode(15, OUTPUT); // D8 -> pin 10 on 7-segment
  pinMode(10, FUNCTION_2);
  pinMode(10, OUTPUT);
  
  Serial.println();

  Serial.printf("Connecting to %s ", ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(300);
    Serial.print(".");
  }
  Serial.println(" connected");

  Udp.begin(localUdpPort);
  Serial.printf("Now listening at IP %s, UDP port %d\n", WiFi.localIP().toString().c_str(), localUdpPort);
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
void loop()


{
  adc0_1 = ads.readADC_SingleEnded(0);
  adc1_1 = ads.readADC_SingleEnded(1);
  delay(100);
  adc0_2= ads.readADC_SingleEnded(0);
  adc1_2 = ads.readADC_SingleEnded(1);
  DeltaSensor1=   adc0_1 -   adc0_2;
  DeltaSensor2=   adc1_1 -   adc1_2;
    if (DeltaSensor1 > LaserTresh)
      {
        C=1;
                        Serial.println(DeltaSensor1);
         Serial.println(DeltaSensor2);

      } 
    if (DeltaSensor2 > LaserTresh)
      {
        D=1;

         Serial.println(DeltaSensor1);
         Serial.println(DeltaSensor2);
      }
   if ((C==1) && (D==0))
      {
      in = 1;
      I = I+1;

      }
   if ((C==0) && (D==0))
      {
      in = 0;
      I=0;
      }
    if ((D==1) && (C==0))
      {
      out = 1;
      N = N+1;

      }
    if ((D==0) && (C==0))
      {
      out = 0;
      N=0;
      }
    if ((in == 1) && (D==1))
      {
        Serial.println("+1");

        count = count +1 ;
        C=0;
        D=0;
        in=0;
        out=0;
        I=0;
        N=0;

        }
    if ((out == 1) && (C==1))
      {
        Serial.println("-1");

        count = count -1 ;
        C=0;
        D=0;
        in=0;
        out=0;
        I=0;
        N=0;
        
  }

              Udp.beginPacket(ip, 4210);
              Udp.write("Ah Shit");
              Udp.endPacket();
              int packetSize = Udp.parsePacket();
              if (packetSize)
              {
                // receive incoming UDP packets
                Serial.printf("Received %d bytes from %s, port %d\n", packetSize, Udp.remoteIP().toString().c_str(), Udp.remotePort());
                int len = Udp.read(incomingPacket, 255);
               
                Data = atoi(incomingPacket);  
                if (Data > 99)
                {
                  count = Data - 100;
                }
                if (Data < 99)
                {
                  threshold = Data;
                }

          
                if (len > 0)
                {
                  incomingPacket[len] = 0;
                }
                Serial.printf("UDP packet contents: %s\n", incomingPacket);
            
                // send back a reply, to the IP address and port we got the packet from
                Udp.beginPacket(Udp.remoteIP(), Udp.remotePort());
                Udp.write(replyPacket);
                Udp.endPacket();
            delay(1);
            }
         
      if (threshold <= count)
       {
           digitalWrite(10, HIGH);
       }
      else 
       {
            digitalWrite(10, LOW);
      }
      seven_segment(count);  
      if (I>10)
      {
        C=0;
      }
      if (N>10)
      {
        D=0;
      }

      }
  void seven_segment(int number)

{

  digitalWrite(16, LOW);
  digitalWrite(2, LOW);
  digitalWrite(12, LOW);
  digitalWrite(0, LOW);
  digitalWrite(14, LOW);
  digitalWrite(13, LOW);
  digitalWrite(15, LOW);

  if (number == 0){
    digitalWrite(13, HIGH);
    digitalWrite(15,HIGH);
    digitalWrite(16, HIGH);
    digitalWrite(14,HIGH);
    digitalWrite(12, HIGH);
    digitalWrite(2, HIGH);
  }

   if (number == 1){
  
    digitalWrite(16, HIGH);
    digitalWrite(14,HIGH);
  }

  if (number == 2) {
    digitalWrite(2, HIGH);
    digitalWrite(16, HIGH);
    digitalWrite(0, HIGH);
    digitalWrite(15, HIGH);
    digitalWrite(13, HIGH);
  }

  if (number == 3) {
    digitalWrite(2, HIGH);
    digitalWrite(16, HIGH);
    digitalWrite(0, HIGH);
    digitalWrite(14, HIGH);
    digitalWrite(13, HIGH);
  }

  if (number == 4) {
    digitalWrite(12, HIGH);
    digitalWrite(0, HIGH);
    digitalWrite(16, HIGH);
    digitalWrite(14, HIGH);
    
  }

  if (number == 5) {
    digitalWrite(2, HIGH);
    digitalWrite(12, HIGH);
    digitalWrite(0, HIGH);
    digitalWrite(14, HIGH);
    digitalWrite(13, HIGH);
    
  }

  if (number == 6) {
    digitalWrite(12, HIGH);
    digitalWrite(15, HIGH);
    digitalWrite(2, HIGH);
    digitalWrite(13, HIGH);
    digitalWrite(14, HIGH);
    digitalWrite(0, HIGH);
    
  }

  if (number == 7) {
    digitalWrite(2, HIGH);
    digitalWrite(16, HIGH);
    digitalWrite(14, HIGH);
  }

  if (number == 8) {
    digitalWrite(2, HIGH);
    digitalWrite(12, HIGH);
    digitalWrite(0, HIGH);
    digitalWrite(16, HIGH);
    digitalWrite(15, HIGH);
    digitalWrite(14, HIGH);
    digitalWrite(13, HIGH);
    
  }

  if (number == 9) {
    digitalWrite(2, HIGH);
    digitalWrite(12, HIGH);
    digitalWrite(0, HIGH);
    digitalWrite(16, HIGH);
    digitalWrite(14, HIGH);
    
  }

  
}
